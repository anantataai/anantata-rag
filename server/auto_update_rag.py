"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è RAG –ø–∞–º'—è—Ç—ñ –∑ ChatGPT —Ç–∞ Claude
"""

import os
import json
import logging
from datetime import datetime
from pathlib import Path
from chatgpt_to_qdrant import ChatGPTToQdrant

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/rag_update.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è RAG
QDRANT_URL = "http://localhost:6333"
rag = ChatGPTToQdrant(qdrant_url=QDRANT_URL)

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ (—á–µ—Ä–µ–∑ latest)
DATA_DIR = Path("/root/rag-memory/data")
LATEST_DIR = DATA_DIR / "latest"
CHATGPT_FILE = LATEST_DIR / "chatgpt_conversations.json"
CLAUDE_FILE = LATEST_DIR / "claude_conversations.json"


def update_from_chatgpt():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ ChatGPT"""
    logger.info("=" * 50)
    logger.info("üì± ChatGPT: –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
    
    if not CHATGPT_FILE.exists():
        logger.warning(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {CHATGPT_FILE}")
        return False
    
    try:
        logger.info(f"üìÇ –ß–∏—Ç–∞—é: {CHATGPT_FILE}")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –º–µ—Ç–æ–¥
        rag.load_from_file(str(CHATGPT_FILE))
        
        logger.info("‚úÖ ChatGPT —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ ChatGPT: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


def parse_claude_conversations(data):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç—É Claude"""
    conversations = []
    
    if isinstance(data, list):
        for conv in data:
            conv_id = conv.get('uuid', 'unknown')
            title = conv.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
            created_at = conv.get('created_at', '')
            
            messages = []
            chat_messages = conv.get('chat_messages', [])
            
            for msg in chat_messages:
                sender = msg.get('sender', 'unknown')
                text = msg.get('text', '')
                
                if text:
                    messages.append({
                        'role': 'user' if sender == 'human' else 'assistant',
                        'content': text
                    })
            
            if messages:
                conversations.append({
                    'id': conv_id,
                    'title': title,
                    'create_time': created_at,
                    'messages': messages
                })
    
    return conversations


def update_from_claude():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ Claude"""
    logger.info("=" * 50)
    logger.info("ü§ñ Claude: –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
    
    if not CLAUDE_FILE.exists():
        logger.warning(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {CLAUDE_FILE}")
        return False
    
    try:
        logger.info(f"üìÇ –ß–∏—Ç–∞—é: {CLAUDE_FILE}")
        
        with open(CLAUDE_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        conversations = parse_claude_conversations(data)
        
        logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(conversations)} —Ä–æ–∑–º–æ–≤ Claude")
        
        if not conversations:
            logger.warning("‚ö†Ô∏è –†–æ–∑–º–æ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø—Ä–æ—Å—Ç–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        for conv in conversations[:5]:  # –ü–µ—Ä—à—ñ 5 –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
            logger.info(f"  üìù {conv['title']}: {len(conv['messages'])} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        
        logger.info("‚úÖ Claude –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!")
        logger.info("‚ö†Ô∏è –ü–æ–≤–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Claude –≤ RAG - –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Claude: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


def get_rag_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG"""
    try:
        collections_info = rag.client.get_collections()
        
        logger.info("=" * 50)
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG –±–∞–∑–∏:")
        
        for collection in collections_info.collections:
            points = collection.points_count if hasattr(collection, 'points_count') else 'N/A'
            logger.info(f"  üì¶ {collection.name}: {points} –∑–∞–ø–∏—Å—ñ–≤")
            
        logger.info("=" * 50)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    logger.info("\n" + "=" * 50)
    logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.now()}")
    logger.info("=" * 50)
    
    results = {
        'chatgpt': update_from_chatgpt(),
        'claude': update_from_claude()
    }
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    get_rag_stats()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    logger.info("=" * 50)
    logger.info("üìã –ü—ñ–¥—Å—É–º–æ–∫:")
    for source, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        logger.info(f"  {status} {source.upper()}")
    
    logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now()}")
    logger.info("=" * 50 + "\n")


if __name__ == "__main__":
    main()
